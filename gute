#!/usr/bin/env escript

conf() ->
    "gute.conf".

main(Args) ->
    [Path | _] = Args,
    check_needed_executables(),
    update_all_files(Path).

needed_executables() ->
    [
     "git"
    ].

check_needed_executables() ->
    lists:foreach(
      fun (X) ->
              executable_present(X)
      end,
      needed_executables()).

executable_present(Name) ->
    case os:find_executable(Name) of
        false ->
            throw(Name ++ " is not present on the system")
                ;
        _ ->
            ok
    end.


update_all_files(Path) ->
    Files = file_tree(Path),
    {ok, Patterns} = file:consult(filename:join(Path, conf())),
    PatternValues = user_values(Patterns),
    lists:foreach(
      fun (File) ->
              update(File, PatternValues)
      end,
      Files).

file_tree(Path) ->
    Result = filelib:wildcard("**/*", Path),
    FullPathResult = lists:map(fun (File) ->
                                       filename:join(Path, File)
                               end,
                               Result),
    ResultNoDir = lists:filter(fun (X) ->
                                       (not filelib:is_dir(X)) and not is_conf(X)
                               end,
                               FullPathResult),
    io:format("Files ~p~n", [ResultNoDir]),
    lists:delete(conf(), ResultNoDir).

user_values(Patterns) ->
    lists:foldl(
      fun ({Pattern, Pre, Message}, Acc) ->
              {ok, [Value]} = io:fread(Message, "~s"),
              [{Pattern, Pre, Value} | Acc]
      end,
      [],
      Patterns).

update(File, Patterns) ->
    lists:foreach(
      fun ({Variable, Pre, Value}) ->
              BValue = erlang:list_to_binary(Value),
              render(File, Variable, BValue),
              rename(File, Pre, Value)
      end,
      Patterns).

render(File, Variable, Value) ->
    {ok, Content} = file:read_file(File),
    NewContent = binary:replace(Content, Variable, Value, [global]),
    file:write_file(File, NewContent).

rename(File, Pre, Value) ->
    NewFilename = erlang:iolist_to_binary(re:replace(File, Pre, Value)),
    file:rename(File, NewFilename).

is_conf(Path) ->
    case re:run(Path, [".*", conf(), ".*"]) of
        nomatch ->
            false;
        _ ->
            true
    end.

git_clone(RepoUrl) ->
    os:cmd(["git clone ", RepoUrl]).
